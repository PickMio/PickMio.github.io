<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Unity3d笔记]]></title>
      <url>http://yoursite.com/2016/08/29/Unity3d%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ol>
<li><code>GameObject.CreatePrimitive()</code>:创建一个原始游戏对象，七参数可以设置为立方体、球体、圆柱体等系统默认的游戏对象。</li>
<li><p><code>AddComponent()</code>:用于给该游戏对象添加一个组件。组件没有自身对应的删除方法，需要使用父类执行Object.Destroy()才能删除 </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GameObject obj = GameObject.Find(<span class="string">"Cube"</span>);  </div><div class="line">obj.AddComponent(<span class="string">"Test"</span>);           <span class="comment">//给对象添加Test脚本</span></div><div class="line">Destroy(obj.GetComponent(<span class="string">"Test"</span>));  <span class="comment">//删除对象的Test脚本</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>renderer.material.color</code>:设置渲染材质的颜色或贴图</p>
</li>
<li><code>trasform.position</code>:设置该游戏对象的位置<a id="more"></a></li>
<li><p>获取游戏物体的三种方案  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- GameObject obj = GameObject.find(<span class="string">"UI Root\player"</span>);</div><div class="line">    - 该方法的参数为游戏对象在Hierarchy视图中的完整路径</div><div class="line">- GameObject obj = GameObject.FindWithTag(<span class="string">"MyTag"</span>);</div><div class="line">    - 该方法参数为给游戏对象添加的Tag</div><div class="line">- GameObject[] objs = GameObject.FindGameObjectsWithTag(<span class="string">"MyTag"</span>);</div><div class="line">    - 该方法能够获取所有标签为`MyTag`的对象</div></pre></td></tr></table></figure>
</li>
<li><p>消息的发送  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BroadcastMessage(<span class="string">"arg1"</span>,<span class="string">"arg2"</span>)    <span class="comment">//向子类发送消息  </span></div><div class="line">  	SednMessage(<span class="string">"arg1"</span>,<span class="string">"arg2"</span>)         <span class="comment">//向自己发送消息  </span></div><div class="line">  	SendMessageUpwards(<span class="string">"arg1"</span>,<span class="string">"arg2"</span>)  <span class="comment">//向父类发送消息  </span></div><div class="line"><span class="comment">//arg1表示接收消息,arg2表示发送的参数</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>Instantiate()</code>克隆游戏对象.</p>
</li>
<li>游戏对象位置相关  <ul>
<li><code>obj.transform.position()</code>    //对象的当前位置</li>
<li><code>obj.transform.Rotate()</code>      //旋转对象</li>
<li><code>obj.transform.RotateAround()</code>//围绕某点旋转</li>
<li><code>Time.deltaTime</code>              //上一帧所消耗的时间</li>
<li><code>Vector3.right</code>               //x轴方向</li>
<li><code>Vector3.up</code>                  //y轴方向</li>
<li><code>Vector3.forward</code>             //z轴方向</li>
<li><code>transform.Translate(Vector3.forward)</code>//平移</li>
<li><code>transform.localeScale = Vectors(scaleX,scaleY,scaleZ)</code>//缩放</li>
</ul>
</li>
<li>游戏脚本都要继承<code>MonoBehaviour</code>类。而且新建的类名应该和项目资源视图中该脚本的名称对应，否则就无法成功绑定至游戏对象。</li>
<li>Time类  <ul>
<li>Time.time:从游戏开始后开始计时，表示机制目前共运行的游戏时间</li>
<li>Time.deltaTime:获取Update()方法中完成上一帧所消耗的时间</li>
<li>Time.fixedTime:FixedUpdate()方法中固定消耗的时间中和 </li>
<li>Time.fixedDeltaTime:固定更新上一帧所消耗的时间。</li>
</ul>
</li>
<li><p><code>WaitForSeconds(int argc)</code>可以让程序等待argc秒。返回值为IEnumerator，在需要等待的地方调用<code>yield return new WaitForSeconds(s)</code>，让主线程等待s秒后继续执行。调用改函数的函数应该将返回类型设置为<code>IEnumerator</code>。  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">	<span class="function">IEnumerator <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> Test();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function">IEnumerator <span class="title">Test</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">7</span></span>)</span>;</div><div class="line">		<span class="comment">//等待2秒后返回</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>Random.Range(int start, int end)</code>获取随机数，获取范围是个闭合的类似<code>(start,end)</code>。即在不包含start和end的值随机。</p>
</li>
<li><p>Renderer(渲染器)的使用:  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Renderer render = obj.GetComponent(<span class="string">"Renderer"</span>);</div><div class="line">render.material.color = Color.green;   <span class="comment">//组件颜色</span></div><div class="line">render.material.mainTexture = <span class="literal">null</span>;    <span class="comment">//组件贴图</span></div></pre></td></tr></table></figure>
</li>
<li><p>Mathf 数学工具函数  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Mathf.Abs(<span class="keyword">int</span> i);</div><div class="line">Mathf.Clamp(<span class="keyword">int</span> num, <span class="keyword">int</span> min, <span class="keyword">int</span> max);</div><div class="line">Mathf.Lerp(<span class="keyword">float</span> start, <span class="keyword">float</span> end, Time.time);</div><div class="line">Mathf.Sin(<span class="number">5</span>);</div><div class="line">Mathf.Cos(<span class="number">7</span>);</div><div class="line">Mathf.Tan(<span class="number">3</span>);</div><div class="line">Mathf.Max(<span class="number">33</span>,<span class="number">77</span>);</div><div class="line">Mathf.Min(<span class="number">33</span>,<span class="number">99</span>);</div><div class="line">Mathf.PI;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VBA常用语法]]></title>
      <url>http://yoursite.com/2016/08/29/VBA%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<ol>
<li>数组下标是从0开始的</li>
<li>sheet下标是从1开始的</li>
<li><p>获取<code>dict</code>的方法  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Dim</span> dic  </div><div class="line">setdic = CreateObject(<span class="string">"Scripting.Dictionary"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p><code>dict</code>添加数值方法  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dic.Add <span class="keyword">key</span>, value</div></pre></td></tr></table></figure>
</li>
<li><p>遍历<code>dict</code> 方法  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">For</span> <span class="keyword">Each</span> Data <span class="keyword">In</span> dict</div><div class="line">	MsgBox (dict.Item(Data) &amp; <span class="string">":"</span> &amp; Data)</div><div class="line"><span class="keyword">Next</span></div></pre></td></tr></table></figure>
</li>
<li><p>vba用 <code>&#39;&amp;&#39;</code>来连接字符串</p>
<a id="more"></a></li>
<li><p>正则表达式使用方法  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Dim</span> regEx</div><div class="line"><span class="keyword">Set</span> regEx = CreateObject(<span class="string">"vbscript.regexp"</span>)</div><div class="line">regEx.<span class="keyword">Global</span> = <span class="literal">True</span></div><div class="line">regEx.Pattern = <span class="string">".?[0-9A-F]+$"</span></div><div class="line">result = regEx.test(content) <span class="comment">'验证content</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取某张数据表(sheet)已经使用的行列数方法</p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Dim</span> rows, columns  </div><div class="line">rows = sheet.UsedRange.rows.Count  </div><div class="line">colums = sheet.UsedRange.Columns.Count</div></pre></td></tr></table></figure>
</li>
<li><p>获取某张数据表  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Sheets(i)<span class="comment">'根据id获取表  </span></div><div class="line">Sheets(<span class="string">"map"</span>)<span class="comment">'根据名称获取表</span></div><div class="line">Sheets(i).name<span class="comment">'获取表的名称</span></div></pre></td></tr></table></figure>
</li>
<li><p>获得数据表的某行内容  </p>
<figure class="highlight vb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sheets(i).Cells(c, <span class="number">1</span>)</div><div class="line">Sheets(i).Range(<span class="string">"A17"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>UBound获取数组长度(数组最后一位的下标,数组从0开始).1表示有两个数</p>
</li>
<li>当函数从中间处理错误要退出可以使用 <code>Exit Function</code>不要用Return，不然返回值会没有</li>
<li>使用 Function关键字能有返回值，返回值应该赋给函数名。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Blog 模板配置]]></title>
      <url>http://yoursite.com/2016/08/29/Blog-%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>由于之前的主题landscape(存放在如<code>D:\GitHub\Blogs\themes</code>中)没有自带评论功能，暂时换pacman主题，它使用第三方评论系统<strong>多说</strong>。关于自定义评论功能再议。<br>打开git shell，切换到你的<code>D:\GitHub\Blogs</code>目录下，使用命令安装主题:</p>
<blockquote>
<p>git clone <a href="https://github.com/A-limon/pacman.git" target="_blank" rel="external">https://github.com/A-limon/pacman.git</a> themes/pacman  </p>
</blockquote>
<p>完成后，打开D:\GitHub\Blogs_config.yml，修改主题为pacman。</p>
<blockquote>
<p>theme: pacman  </p>
</blockquote>
<p>再按照前面介绍的生成静态页面方法，生成后，将public文件夹下内容上传到git hub项目文件中。测试看看效果。</p>
<blockquote>
<p>hexo g #是generate的简写，将md文件编译成html静态页面<br>hexo s #是server的简写启动server<br><a id="more"></a></p>
<p>#新建文档<br>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md<br>hexo new [layout] “postName” #新建文章</p>
</blockquote>
<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md  </p>
<blockquote>
<p>title: { { title } }<br>date: { { date } }<br>categories:<br>tags:    </p>
</blockquote>
<p>看一下刚才生成的文件 hexo\source_posts\postName.md ，内容如下：</p>
<blockquote>
<p>title: postName  #文章页面上的显示名称，可以任意修改，不会出现在URL中<br>date: 2013-12-02 #文章生成时间，一般不改，当然也可以任意修改<br>categories:      #文章分类目录，可以为空，注意:后面有个空格<br>tags:            #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</p>
</blockquote>
<p>代码高亮方法:<br>在```后面使用添加代码的语言，如```cpp</p>
<p>参考博客:<br><a href="]http://blog.fens.me/hexo-blog-github/">张丹(Conan), 程序员Java,R,PHP,Javascript</a><br><a href="http://www.tuicool.com/articles/AfQnQjy" target="_blank" rel="external">推酷</a><br><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">金石开</a><br><a href="http://yangjian.me/pacman/hello/introducing-pacman-theme/" target="_blank" rel="external">Pacman 使用细则</a></p>
<p><strong>备注:由于这边Pacman的代码高亮显示貌似没有起到作用，故将主题换到litten，具体操作方法类似。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo搭建个人博客]]></title>
      <url>http://yoursite.com/2016/08/29/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>hexo，一个基于Node.js的静态博客程序。能够将Markdown文件生成静态页面，输出至其根目录的public文件夹下。可以将生成的public文件的所有内容，上传至GitHub的blog项目下。通过类似pickmio.github.io(pickmio改为你自己的GitHub用户名)的网址就能访问你的Blog了。网上也有很多搭建方案，但是我自己在配置却碰到些问题，记录下来希望能有帮助。</p>
<h1 id="下载安装GitHub"><a href="#下载安装GitHub" class="headerlink" title="下载安装GitHub"></a>下载安装GitHub</h1><p>点击<a href="https://windows.github.com/" target="_blank" rel="external">GitHub下载页面</a>安装过程按照提示一步一步来。GitHub的安装是先下载一个下载器再在线安装。在下载过程中可能会失败，下载进度条并没有完全就中断了。可以按下Windows键，在搜索程序和文件中键入Internet 选项(Internet后有空格)选择Internet 选项,选中 安全选项卡,选择受信任的站点→点击站点按钮。弹出的窗口中的文本框中输入 github-windows.s3.amazonaws.com点击添加。再试着点击<a href="https://windows.github.com/" target="_blank" rel="external">GitHub下载页面</a>安装。如果没有GitHub账号，可参考<a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="external">GitHub的帮助文档</a>。</p>
<p>#下载安装Node.Js<br>点击进入<a href="https://nodejs.org/" target="_blank" rel="external">Node.Js</a>下载页面。一路下一步即可。</p>
<p>#安装Hexo<br>配置好GitHub后，双击桌面的Git Shell ,使用npm安装Hexo。  </p>
<blockquote>
<p>npm install -g hexo</p>
</blockquote>
<p>需要安装一些插件，请使用npm安装:</p>
<blockquote>
<p>npm install hexo-renderer-ejs –save<br>npm install hexo-renderer-stylus –save<br>npm install hexo-renderer-marked –save<br><a id="more"></a>  </p>
<p>#创建Blog文件<br>使用桌面上的<code>Git Shell</code>进入到你为Blog设立的的目录并键入命令<code>hexo init</code><br>cd D:\GitHub\Blogs<br>hexo init</p>
</blockquote>
<p>会看到回显的提示</p>
<blockquote>
<p>INFO  You are almost done! Don’t forget to run ‘npm install’…</p>
</blockquote>
<p>请按照她提示的键入npm install，耐心等待(这一步是必要的不然你在键入hexo ?时命令提示里面可能会没有server这条命令)<br>此时你会看见Blogs目录下生成了一些文件。已经成功了一大半了。继续在Git Shell里输入命令:</p>
<blockquote>
<p>hexo g #是generate的简写，将md文件编译成html静态页面<br>hexo s #是server的简写启动server</p>
</blockquote>
<p>此时，可以在浏览器中输入localhost:4000来预览页面。此时的页面只是Hexo自动生成的页面，如何创建自己的页面以及页面的编写会在下篇文章出现。</p>
<p>#将静态页面部署到GitHub<br>双击桌面的GitHub，点击左上角的加号按钮，在Create页面的<code>Name</code>项输入”xxx.github.io”,”xxx”表示你自己的GitHub名称如我的GitHub名称是PickMio,就将项目名称设置为<code>pickmio.github.io</code>。在GitHub网页中将当前项目切换到<code>xxx.github.io</code>。在右侧有个settings(HTTPS clone URL的上面)，点击进去,在页面找到<code>Automatic page generator按钮</code>。再点击弹出页面右下角的绿色按钮<code>Continue to layouts</code>。在新的页面顶部随便选取一个style，点击绿色按钮<code>Publis page</code>,发布网页。此时，GitHub使用她自己的框架生成了一个页面。然而我们需要的使用Hexo创建得页面，所以得做出修改。<br>将<code>xxx.github.io</code>同步到本地的文件夹下(Git使用基础)。然后将该文件夹下的除了<code>.git文件夹</code>,<code>.gitattributes</code>,<code>.gitignore</code>三个文件以外的所有文件及文件夹删除(注意:一定不要将那三个文件删除了，他们是GitHub的版本控制信息文件，删除后无法正常工作)。再将之前在本地设置的hexo页面文件目录D:\GitHub\Blogs的publish下的所有文件copy到”xxx.github.io文件夹下，再同步，完成。</p>
<p>#查看效果<br>在浏览器输入<code>pickmio.github.io</code>(请将pickmio设置为你所设置的内容)，即可看见效果。恭喜，一个新鲜的Blog诞生!<br>本文参考了大牛<a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">wsgzao</a>的博文，感谢!</p>
]]></content>
    </entry>
    
  
  
</search>
